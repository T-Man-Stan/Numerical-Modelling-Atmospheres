Evaluation of the effects and the feasibility of stratospheric sulfate aerosol injection
using a grey atmosphere model for Earth - RCP 2.6 scenario

Step 1: model the current state of climate with a 2-layer grey atmosphere model, in equilibrium

Determine the emissivity for the lower layer (i.e. the troposphere) to match the current average surface temperature (288.15K).
To do so, we assume a low emissivity (0.01) for the upper layer (i.e. the stratosphere), as most of the greenhouse gases are concentrated
in the troposphere. Also, we introduce an additional albedo for the upper layer, which will be changed later in the project to model the 
injection of sulfate aerosols in the stratosphere.

import numpy as np
import sympy as s
import matplotlib
import matplotlib.pyplot as plt
% matplotlib inline 
import sympy as s
s.init_printing()

# Equations for the 2-layer grey atmosphere
#alpha,S0,sigma,B1,Bs,B2,e1,e2 = s.symbols('alpha S_0 sigma B_1 B_s B_2 epsilon_1  epsilon_2')
alpha,alpha2,S0,sigma,Bs,B1,B2,e1,e2 = s.symbols('alpha,alpha2,S_0,sigma,B_s,B_1,B_2,epsilon_1,epsilon_2')

# Surface
L0 = s.Eq((1-alpha2)*S0/4 + e1*B1 + (1-e1)*e2*B2, alpha*(1-alpha2)*S0/4 + Bs)
# Bottom layer - troposphere
L1 = s.Eq(e1*Bs+e1*e2*B2, 2*e1*B1)
# Top layer - stratosphere
L2 = s.Eq((1-e1)*e2*Bs+e1*e2*B1,2*e2*B2)

# Solve the model
ans = s.solve([L0,L1,L2],(Bs,B1,B2))

# Determine the equations to get the temperatures of the different layers
Ts = (ans[Bs]/sigma)**s.Rational(1/4)
T1 = (ans[B1]/sigma)**s.Rational(1/4)
T2 = (ans[B2]/sigma)**s.Rational(1/4)

# Solve for the current state - determine current emissivity of the troposphere to match the current surface Temperature
Eq_knownTs = s.Eq(Ts,288.15)
Eq_knownTs=Eq_knownTs.subs({alpha:0.3,S0:1361,sigma:5.67E-8,e2:0.01,alpha2:0.0})
e1_knownTs_present=s.solve(Eq_knownTs,e1)
print('Emissivity of troposphere - current state: ',e1_knownTs_present[0])

# Set eps1
eps1 = e1_knownTs_present[0] #0.778

Emissivity of troposphere - current state:  0.777636412309266

Step 2: add time dependance to the model, and test it

The goal will be finding how the emissivity of the lower layer (troposphere) needs to vary in time to match the predicted
increased in temperature by 2100 - RCP 8.5 scenario.

# Physical constants
Re    = 6.371E6    # Radius of Earth in m
sigma = 5.67E-8    # Stephan Boltzmann constant in W / m^2 / K^4
c_s   = 712        # heat capacity of Silicon rock in J /kg / K
rho_s = 2650       # density of Silicon rock in kg/m^3
c_w   = 4000       # heat capacity of water in J /kg / K
rho_w = 1000       # density of water in kg/m^3
M     = 5.972E24   # mass of Earth in kg
S     = 1370       # Solar Flux in W/m^2
year = 365.25*24*3600 # seconds in a year
eps2  = 0.01       # Emissivity, layer 2 (stratsophere)
alpha = 0.3        # Albedo of Earth - this will be varied later in the project!
alpha2 = 0.0       # Albedo of Stratosphere

# Simplification constants
A = 1 * np.pi * Re**2 
B = 4 * np.pi * Re**2 * sigma 

# Volume of top 100 m of earth
vol_100m= 4 *np.pi* Re**2 * 100
# Volume of top 1000 m of earth
vol_1000m= 4 *np.pi* Re**2 * 1000

# Derived constants (100m for rock, 1000m for ocean)
C_s1 = c_s* rho_s * vol_100m     # heat capacity in J / K
C_w1 = c_w* rho_w * vol_1000m    # heat capacity in J / K
C_earth = 0.7*C_s1 + 0.3*C_w1

# Set up Time Constraints
To = 255
time_check = (To*C_earth/abs(A*S*(1-alpha)-B*To**4))/1000
print('Max time step allowed: %.2E' % time_check,'s')

dt = 5*1e6 # s
t_end = year*200

# Lists to store results
time = []
T_bb,T_1lay,T_2lay = [],[],[]

Max time step allowed: 4.15E+10 s

# Define functions of progressively major complexity to numerically integrate different EBM models 

# 1-layer, black atmosphere
def integratebb(T0,dt,end_time, T_list, t_list,C):
    T,t = T0, 0
    T_list.clear(); T_list.append(T0)
    t_list.clear(); t_list.append(t)

    # use Euler forward method to integrate Temperature over time
    while (t<=end_time):
        t = t  + dt
        T = T  + dt*(A/C*S*(1-alpha) -B/C * T**4)
        T_list.append(T)
        t_list.append(t)
    return()

# 1-layer, grey atmosphere
def integrateatm(T0,dt,end_time, T_list, t_list,C):
    T,t = T0, 0
    T_list.clear(); T_list.append(T0)
    t_list.clear(); t_list.append(t)

    # use Euler forward method to integrate Temperature over time
    while (t<=end_time):
        t = t  + dt
        T = T  + dt*(A/C*S*(1-alpha) - (1-eps1/2)*B/C * T**4)
        T_list.append(T)
        t_list.append(t)
    return()

# 2-layer, grey atmosphere
def integrate2atm(T0,dt,end_time,T_list,t_list,C):
    T,t = T0, 0
    T_list.clear(); T_list.append(T0)
    t_list.clear(); t_list.append(t)

    # use Euler forward method to integrate Temperature over time
    while (t<=end_time):
        t = t  + dt
        #T = T  + (dt/C)*(A*S*(1-alpha) + (T**4)*B*( ( eps1*(1+0.5*eps2*(1-eps1))/(2-eps1*eps2*0.5) ) + ( (1-eps1)*eps2*( 0.5*(1-eps1) + eps1*( (1+eps2*(1-eps1)*0.5)/(2-eps1*eps2*0.5) ) ) ) - 1 ))
        T = T  + (dt/C)*(A*S*(1-alpha)*(1-alpha2) + (T**4)*B*( ( eps1*(1+0.5*eps2*(1-eps1))/(2-eps1*eps2*0.5) ) + ( (1-eps1)*eps2*( 0.5*(1-eps1) + eps1*( (1+eps2*(1-eps1)*0.5)/(2-eps1*eps2*0.5) ) ) ) - 1 ))
        T_list.append(T)
        t_list.append(t)
    return()
    
    # Test the models to be sure they work!
# Start from 0K and see how temperature evolves in time for the different models

# 1-layer, black atmosphere
integratebb(0,dt,t_end,T_bb,time,C_earth)
# 1-layer, grey atmosphere
integrateatm(0,dt,t_end,T_1lay,time,C_earth)
# 2-layer, grey atmosphere
integrate2atm(0,dt,t_end,T_2lay,time,C_earth)

# Time vector for plots
tyr = [i/year for i in time]

# Plot surface temperature vs time
font = {'size'   : 20}

fig = plt.figure(figsize=(10,5))
plt.axhline(y=288.15, color='black', linestyle='dotted',label='Current surface temperature')
plt.plot(tyr,T_bb,label="1-layer blackbody",color='blue')
plt.plot(tyr,T_1lay,label="1-layer grey",color='green')
plt.plot(tyr,T_2lay,'r--',label="2-layer grey")
fig.suptitle('Time vs. average surface Temperature')
plt.xlabel('Time (years)')
plt.ylabel('Temperature (K)')
plt.legend()






The 1-layer and 2-layer model provide very similar results as we are using a really low emissivity for the upper layer.

Step 3: use the time dependent model for a 2-layer grey atmosphere to determine how eps1 will change to match the RCP 8.5 future 
temperature. The RCP 8.5 scenario assumes a 4deg increase in temperature by 2100, with an approximately linear temporal variation. 
We assume this variation occurs in 95 years (from 2005 to 2100).



